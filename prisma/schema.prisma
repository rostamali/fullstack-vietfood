generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User related models
enum Role {
  USER
  ADMIN
}

enum AccountStatus {
  INACTIVE
  ACTIVE
}

model User {
  id         String        @id @unique @default(uuid())
  firstName  String
  lastName   String?
  email      String        @unique
  password   String
  avatar     Avatar?
  isVerified Boolean       @default(false)
  role       Role          @default(USER)
  totalSpend Float?
  status     AccountStatus @default(INACTIVE)
  files      File[]

  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id           String   @id @unique @default(uuid())
  contactName  String
  phoneNumber  String
  phoneCode    String
  countryCode  String
  stateCode    String
  cityName     String?
  zipCode      String
  addressLine1 String?
  addressLine2 String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Files related models
model Avatar {
  id        String   @id @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  fileName  String
  url       String
  size      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id              String   @id @unique @default(uuid())
  fileType        String
  fileName        String   @unique
  title           String
  description     String?
  url             String
  size            String
  gallery         Gallery? @relation(fields: [galleryId], references: [id])
  galleryId       String?
  isCompress      Boolean  @default(false)
  compressPercent Float?
  author          User     @relation(fields: [authorId], references: [id])
  authorId        String
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  productCategory   ProductCategory? @relation(fields: [productCategoryId], references: [id])
  productCategoryId String?          @unique
  product           Product?         @relation(fields: [productId], references: [id])
  productId         String?          @unique
  brand             Brand?           @relation(fields: [brandId], references: [id])
  brandId           String?          @unique
}

model Gallery {
  id        String   @id @unique @default(uuid())
  files     File[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id])
  productId String  @unique
}

// Products related models
model ProductCategory {
  id             String                @id @unique @default(uuid())
  name           String
  slug           String                @unique
  thumbnail      File?
  description    String?
  products       CategoriesOnProduct[]
  parentId       String?
  parentCategory ProductCategory?      @relation("subCategories", fields: [parentId], references: [id])
  subCategories  ProductCategory[]     @relation("subCategories")

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("category")
}

model CategoriesOnProduct {
  product    Product         @relation(fields: [productId], references: [id])
  productId  String
  category   ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([productId, categoryId])
}

model Product {
  id          String        @id @unique @default(uuid())
  name        String
  slug        String
  excerpt     String?
  description String?
  status      AccountStatus @default(INACTIVE)

  label      String?
  isFeatured Boolean @default(false)

  thumbnail File?
  gallery   Gallery?

  taxClass  String?
  taxStatus TaxStatus @default(NONE)
  weight    Float?

  brand      Brand?                @relation(fields: [brandId], references: [id])
  brandId    String?
  categories CategoriesOnProduct[]
  inventory  ProductInventory?

  shipClass   ShippingClass? @relation(fields: [shipClassId], references: [id])
  shipClassId String?

  reviewStatus Boolean @default(false)
  purchaseNote String?

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductInventory {
  id           String  @id @unique @default(uuid())
  product      Product @relation(fields: [productId], references: [id])
  productId    String  @unique
  retailPrice  Float?
  regularPrice Float?
  salePrice    Float?
  sku          String
  stockQTY     Int @default(0)
  soldQTY      Int     @default(0)
  inStock      Boolean @default(false)
  threshold    Int
  soldIndividual Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id             String    @id @unique @default(uuid())
  name           String    @unique
  slug           String    @unique
  description    String?
  thumbnail      File?
  contactName    String?
  contactEmail   String?
  contactPhone   String?
  contactWebsite String?
  products       Product[]
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// Shipping related models
enum MethodType {
  FLAT_RATE
  FREE_SHIPPING
  LOCAL_PICKUP
}

enum LocationType {
  COUNTRY
  STATE
}

enum TaxStatus {
  TAXABLE
  NONE
}

model ShippingClass {
  id          String  @id @unique @default(uuid())
  name        String
  slug        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model ShippingZone {
  id      String                 @id @unique @default(uuid())
  name    String
  slug    String                 @unique
  regions ShippingZoneLocation[]
  methods ShippingMethod[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingMethod {
  id        String     @id @unique @default(uuid())
  name      String
  taxStatus TaxStatus  @default(NONE)
  type      MethodType @default(FLAT_RATE)
  active    Boolean    @default(false)
  order     Int        @default(1)
  options   Options?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  zone   ShippingZone @relation(fields: [zoneId], references: [id])
  zoneId String
}

model ShippingZoneLocation {
  id           String       @id @unique @default(uuid())
  locationCode String
  locationType LocationType
  zone         ShippingZone @relation(fields: [zoneId], references: [id])
  zoneId       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Site Options
model Options {
  id       String         @id @unique @default(uuid())
  value    String
  method   ShippingMethod @relation(fields: [methodId], references: [id])
  methodId String         @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
