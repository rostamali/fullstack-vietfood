generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User related models
enum Role {
  USER
  ADMIN
}

enum ProductCollection {
  NEW_ARRIVAL
  BEST_SELLING
  RECOMENDED
}

enum AccountStatus {
  INACTIVE
  ACTIVE
}

enum ProductStatus {
  PUBLISH
  DRAFT
}

model User {
  id                String        @id @unique @default(uuid())
  firstName         String
  lastName          String?
  email             String        @unique
  password          String
  passwordChangedAt DateTime?
  bio               String?
  avatar            Avatar?
  isVerified        Boolean       @default(false)
  role              Role          @default(USER)
  status            AccountStatus @default(INACTIVE)
  files             File[]

  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  address        Address[]
  defaultAddress String?

  cart   Cart?
  orders Order[]

  wishlist Wishlist?
}

model Address {
  id           String   @id @unique @default(uuid())
  contactName  String
  phoneNumber  String
  phoneCode    String
  countryCode  String
  stateCode    String
  cityName     String?
  zipCode      String
  addressLine1 String?
  addressLine2 String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  cart Cart[]
}

// Files related models
model Avatar {
  id        String   @id @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  fileName  String
  url       String
  size      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id              String   @id @unique @default(uuid())
  fileType        String
  fileName        String   @unique
  title           String
  description     String?
  url             String
  size            String
  gallery         Gallery? @relation(fields: [galleryId], references: [id])
  galleryId       String?
  isCompress      Boolean  @default(false)
  compressPercent Float?
  author          User     @relation(fields: [authorId], references: [id])
  authorId        String
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  productCategory   ProductCategory? @relation(fields: [productCategoryId], references: [id])
  productCategoryId String?          @unique
  product           Product?         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         String?          @unique
  brand             Brand?           @relation(fields: [brandId], references: [id])
  brandId           String?          @unique
}

model Gallery {
  id        String   @id @unique @default(uuid())
  files     File[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique
}

// Products related models
model ProductCategory {
  id          String    @id @unique @default(uuid())
  name        String
  slug        String    @unique
  thumbnail   File?
  description String?
  products    Product[]

  parentId       String?
  parentCategory ProductCategory?  @relation("subCategories", fields: [parentId], references: [id])
  subCategories  ProductCategory[] @relation("subCategories")

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("category")
}

model Product {
  id          String        @id @unique @default(uuid())
  name        String
  slug        String
  excerpt     String?       @db.VarChar(300)
  description Bytes?
  status      ProductStatus @default(DRAFT)

  label      String?
  collection ProductCollection @default(NEW_ARRIVAL)

  thumbnail File?
  gallery   Gallery?

  taxStatus TaxStatus @default(NONE)
  weight    Float?

  brand      Brand?           @relation(fields: [brandId], references: [id])
  brandId    String?
  category   ProductCategory? @relation(fields: [categoryId], references: [id])
  categoryId String?

  inventory ProductInventory?

  shipClass   ShippingClass? @relation(fields: [shipClassId], references: [id])
  shipClassId String?

  reviewStatus Boolean @default(false)
  purchaseNote String?

  cart      CartItem[]
  wishLists ProductsOnWishlist[]

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductInventory {
  id             String  @id @unique @default(uuid())
  product        Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      String  @unique
  retailPrice    Float?
  regularPrice   Float?
  salePrice      Float?
  sku            String?
  stockQTY       Int     @default(0)
  soldQTY        Int     @default(0)
  inStock        Boolean @default(false)
  threshold      Int
  soldIndividual Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id             String    @id @unique @default(uuid())
  name           String    @unique
  slug           String    @unique
  description    String?
  thumbnail      File?
  contactName    String?
  contactEmail   String?
  contactPhone   String?
  contactWebsite String?
  products       Product[]
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum Currency {
  usd
  euro
}

enum PaymentMethod {
  STRIPE
  PAYPAL
}

// Order related models
model Cart {
  id       String     @id @unique @default(uuid())
  user     User       @relation(fields: [userId], references: [id])
  userId   String     @unique
  items    CartItem[]
  currency Currency   @default(usd)

  address         Address? @relation(fields: [addressId], references: [id])
  addressId       String?
  shippingCost    Float
  shippingMethods String

  taxName   String @default("none")
  taxAmount Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id String @id @unique @default(uuid())

  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

enum OrderStatus {
  PENDING
  ACCEPT
  CANCELLED
  DELIVERED
}

enum PaymentStatus {
  PAID
  UNPAID
  CANCELLED
}

model Order {
  id            String        @id @unique @default(uuid())
  orderId       String        @unique
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  status        OrderStatus   @default(PENDING)
  orderItem     Int
  subTotal      Float
  taxName       String @default("none")
  taxAmount           Float
  totalDiscount Float
  shippingCost  Float
  total         Float
  shippingInfo  ShippingInfo?
  note          String?

  payment   PaymentInfo?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  option   Options @relation(fields: [optionId], references: [id])
  optionId String  @unique
}

model PaymentInfo {
  id              String        @id @unique @default(uuid())
  status          PaymentStatus @default(UNPAID)
  paymentIntentId String        @unique
  clientSecret    String
  currency        Currency      @default(usd)
  amount          Float
  method          PaymentMethod @default(STRIPE)

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingInfo {
  id           String   @id @unique @default(uuid())
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String   @unique
  name         String
  mobile       String
  email        String
  addressLine1 String
  addressLine2 String
  state        String
  city         String
  country      String
  zipCode      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Shipping related models
enum MethodType {
  FLAT_RATE
  FREE_SHIPPING
  LOCAL_PICKUP
}

enum LocationType {
  COUNTRY
  STATE
  ZIPCODE
}

enum TaxStatus {
  TAXABLE
  NONE
}

model ShippingClass {
  id          String  @id @unique @default(uuid())
  name        String
  description String?

  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ShippingZone {
  id      String                 @id @unique @default(uuid())
  name    String
  regions ShippingZoneLocation[]
  methods ShippingMethod[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingMethod {
  id        String     @id @unique @default(uuid())
  name      String
  taxStatus TaxStatus  @default(NONE)
  type      MethodType @default(FLAT_RATE)
  active    Boolean    @default(false)
  order     Int        @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  zone   ShippingZone @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  zoneId String

  option   Options @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId String  @unique
}

model ShippingZoneLocation {
  id           String       @id @unique @default(uuid())
  locationCode String
  locationType LocationType
  zone         ShippingZone @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  zoneId       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tax Models
model TaxRate {
  id           String            @id @unique @default(uuid())
  name         String
  slug         String            @unique
  country      String?
  state        String?
  taxRate      Float             @default(0)
  priority     Int               @default(1)
  taxLocations TaxRateLocation[]
}

model TaxRateLocation {
  id           String       @id @unique @default(uuid())
  locationCode String
  locationType LocationType @default(ZIPCODE)

  tax   TaxRate @relation(fields: [taxId], references: [id])
  taxId String
}

// Wishlist
model Wishlist {
  id     String @id @unique @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  products ProductsOnWishlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductsOnWishlist {
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId String

  @@id([productId, wishlistId])
}

// Site Options
model Options {
  id     String          @id @unique @default(uuid())
  value  Bytes
  method ShippingMethod?
  order  Order?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
